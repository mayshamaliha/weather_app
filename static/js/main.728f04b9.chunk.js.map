{"version":3,"sources":["component/weather_component.jsx","component/form_component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","Weather","props","className","city","weatherIcon","temp_celsius","temp_max","temp_min","description","Form","error","onSubmit","loadweather","type","name","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSA6BA,SAASA,EAAWC,EAAIC,GACpB,GAAGD,GAAOC,EACN,OACI,+BACI,iCAAOD,EAAP,UACA,iCAAOC,EAAP,aAMDC,MApCC,SAAAC,GACf,OAEG,sBAAKC,UAAY,YAAjB,UAEI,qBAAKA,UAAU,OAAf,SACA,6BACKD,EAAME,SAGX,qBAAKD,UAAY,OAAjB,SACI,6BACI,mBAAGA,UAAS,aAASD,EAAMG,mBAInC,sBAAKF,UAAU,OAAf,UACCD,EAAMI,aAAe,+BAAKJ,EAAMI,aAAX,UAAoC,KAErDR,EAAWI,EAAMK,SAAUL,EAAMM,UAClC,oBAAIL,UAAU,cAAd,SAA6BD,EAAMO,qB,MCEhCC,MAvBD,SAAAR,GACV,OACI,sBAAKC,UAAW,YAAhB,UACI,8BACKD,EAAMS,MAaf,qBAAKR,UAAU,gBAAf,qDAb8B,OAE1B,uBAAMS,SAAWV,EAAMW,YAAvB,UACA,uBAAOC,KAAK,OAAOX,UAAW,eAAeY,KAAK,OAAOC,YAAY,SACrE,uBAAOF,KAAK,OAAOX,UAAW,eAAeY,KAAK,UAAUC,YAAY,YACxE,wBAAQb,UAAU,MAAlB,SAAwB,sDCkGrBc,E,kDArGb,aAAc,IAAD,8BACX,gBA0DFC,WA3Da,uCA2DA,WAAMC,GAAN,qBAAAC,EAAA,yDACXD,EAAEE,iBAEIjB,EAAOe,EAAEG,OAAOC,SAASnB,KAAKoB,MAC9BC,EAAUN,EAAEG,OAAOC,SAASE,QAAQD,OAEvCpB,IAAQqB,EANA,iCAOcC,MAAM,oDAAD,OAAqDtB,EAArD,YAA6DqB,EAA7D,kBArElB,qCA8DD,cAOHE,EAPG,gBAQcA,EAASC,OARvB,OAQHC,EARG,OASTC,QAAQC,IAAIF,GAEd,EAAKG,SAAS,CACZ5B,KAAK,GAAD,OAAKyB,EAASd,KAAd,aAAuBc,EAASI,IAAIR,SACxCS,QAAS,EAAKC,WAAWN,EAASO,KAAKC,MACvC9B,SAAU,EAAK4B,WAAWN,EAASO,KAAK7B,UACxCC,SAAU,EAAK2B,WAAWN,EAASO,KAAK5B,UACxCC,YAAaoB,EAASS,QAAQ,GAAG7B,cAEnC,EAAK8B,gBAAgB,EAAKlC,YAAawB,EAASS,QAAQ,GAAGE,IAlBhD,wBAqBT,EAAKR,SAAS,CAACrB,OAAM,IArBZ,4CA3DA,sDAEX,EAAK8B,MAAQ,CACXrC,UAAMsC,EACNjB,aAASiB,EACTC,UAAKD,EACLN,UAAKM,EACLR,aAASQ,EACTnC,cAAUmC,EACVlC,cAAUkC,EACVjC,YAAa,GACbE,OAAO,GAIT,EAAKN,YAAc,CACjBuC,aAAe,kBACfC,QAAS,WACTC,KAAM,mBACNC,KAAM,UACNC,WAAY,SACZC,MAAQ,eACRC,OAAQ,cAtBC,E,uDA0BFb,GAET,OADcc,KAAKC,MAAMf,EAAO,U,sCAIlBgB,EAAOC,GACrB,QAAO,GACL,KAAKA,GAAU,KAAOA,GAAU,IAC9BC,KAAKvB,SAAS,CAACW,KAAKY,KAAKlD,YAAYuC,eACrC,MACF,KAAKU,GAAU,KAAOA,GAAU,IAC9BC,KAAKvB,SAAS,CAACW,KAAKY,KAAKlD,YAAYwC,UACrC,MACF,KAAKS,GAAU,KAAOA,GAAU,IAC9BC,KAAKvB,SAAS,CAACW,KAAKY,KAAKlD,YAAYyC,OACrC,MACF,KAAKQ,GAAU,KAAOA,GAAU,IAC9BC,KAAKvB,SAAS,CAACW,KAAKY,KAAKlD,YAAY0C,OACrC,MACF,KAAKO,GAAU,KAAOA,GAAU,IAC9BC,KAAKvB,SAAS,CAACW,KAAKY,KAAKlD,YAAY2C,aACrC,MACF,KAAgB,MAAXM,EACHC,KAAKvB,SAAS,CAACW,KAAKY,KAAKlD,YAAY4C,QACrC,MACF,KAAKK,GAAU,KAAOA,GAAU,IAC9BC,KAAKvB,SAAS,CAACW,KAAKY,KAAKlD,YAAY6C,SACrC,MACF,QACEK,KAAKvB,SAAS,CAACW,KAAKY,KAAKlD,YAAY6C,Y,+BA6BzC,OACE,sBAAK/C,UAAU,MAAf,UACE,cAAC,EAAD,CAAMU,YAAc0C,KAAKrC,WAAYP,MAAQ4C,KAAKd,MAAM9B,QAC1D,cAAC,EAAD,CACAP,KAAOmD,KAAKd,MAAMrC,KAClBqB,QAAS8B,KAAKd,MAAMhB,QACpBnB,aAAgBiD,KAAKd,MAAMP,QAC3B3B,SAAYgD,KAAKd,MAAMlC,SACvBC,SAAY+C,KAAKd,MAAMjC,SACvBC,YAAe8C,KAAKd,MAAMhC,YAC1BJ,YAAekD,KAAKd,MAAME,c,GA/Fda,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.728f04b9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Weather = props => {\r\n return(\r\n     \r\n    <div className = \"container\">\r\n        \r\n        <div className=\"city\">\r\n        <h1>\r\n            {props.city}\r\n        </h1>\r\n        </div>\r\n        <div className = \"icon\">\r\n            <h1>\r\n                <i className= {`wi ${props.weatherIcon}`}></i>\r\n            </h1>\r\n        </div>\r\n        \r\n        <div className=\"temp\">\r\n        {props.temp_celsius? (<h1>{props.temp_celsius}&deg;</h1>):null}\r\n            \r\n            {minmaxTemp(props.temp_max, props.temp_min)}\r\n            <h2 className=\"description\">{props.description}</h2>\r\n        </div>\r\n    </div>\r\n );\r\n};\r\nfunction minmaxTemp(min,max){\r\n    if(min && max){\r\n        return(\r\n            <h2>\r\n                <span>{min}&deg;</span>\r\n                <span>{max}&deg;</span>\r\n            </h2>\r\n        )\r\n    }\r\n    \r\n}\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.css\";\r\n\r\nconst Form =  props =>{\r\n    return(\r\n        <div className =\"container\">\r\n            <div>\r\n                {props.error? error():null}\r\n            </div>\r\n            <form onSubmit= {props.loadweather}>\r\n            <input type=\"text\" className =\"form-control\" name=\"city\" placeholder=\"city\"/>\r\n            <input type=\"text\" className =\"form-control\" name=\"country\" placeholder=\"country\"/>\r\n            <button className=\"btn\"><h3>Get Weather</h3></button>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert-message\">\r\n            Please Enter City and Country Properly!\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Weather from './component/weather_component';\nimport Form from './component/form_component';\n\nconst API_Key = \"475e35ebeb6a91f78f1386f16707df95\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon:undefined,\n      main:undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    \n\n    this.weatherIcon = {\n      Thunderstorm : \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear:  \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp){\n    let celsius = Math.floor(temp - 273.15);\n    return celsius;\n  }\n\n  get_WeatherIcon(icons, rangeId){\n    switch(true){\n      case rangeId >=200 && rangeId <=232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n        break;\n      case rangeId >=300 && rangeId <=321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeId >=500 && rangeId <=531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n      case rangeId >=600 && rangeId <=622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      case rangeId >=701 && rangeId <=781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n      case rangeId ===800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n      case rangeId >=801 && rangeId <=804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n      default:\n        this.setState({icon:this.weatherIcon.Clouds});\n    }\n  }\n\n  getWeather = async(e) =>{\n    e.preventDefault();\n    \n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    \n    if(city && country){\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_Key}`)\n      const response = await api_call.json();\n      console.log(response);\n    \n    this.setState({\n      city: `${response.name}, ${response.sys.country}`,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max: this.calCelsius(response.main.temp_max),\n      temp_min: this.calCelsius(response.main.temp_min),\n      description: response.weather[0].description,\n    });\n    this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    }\n    else{\n      this.setState({error:true});\n    }\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <Form loadweather ={this.getWeather} error ={this.state.error}/>\n      <Weather \n      city= {this.state.city}\n      country={this.state.country}\n      temp_celsius = {this.state.celsius}\n      temp_max = {this.state.temp_max}\n      temp_min = {this.state.temp_min}\n      description = {this.state.description}\n      weatherIcon = {this.state.icon}\n      />\n    </div>\n    );\n\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}